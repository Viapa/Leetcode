"""
给你一个整数数组 nums ，找到其中最长严格递增子序列的长度。
子序列 是由数组派生而来的序列，删除（或不删除）数组中的元素而不改变其余元素的顺序。例如，[3,6,2,7] 是数组 [0,3,1,6,2,2,7] 的子序列
输入：nums = [10,9,2,5,3,7,101,18]
输出：4
解释：最长递增子序列是 [2,3,7,101]，因此长度为 4 。
进阶：你能将算法的时间复杂度降低到 O(n log(n)) 吗?
"""

"""
此题用动态规划比较容易理解，因此时间复杂度要求O(n^2)即可，下面说一下思路：
1、定义 dp[i] 表示以 nums[i] 为结尾的最长上升子序列的长度;
2、状态转移方程为：如果 nums[j] 小于 nums[i]，那么 dp[i] = max(dp[i], dp[j] + 1)；
3、初始时，dp 数组中每个元素的最小值均为 1，因为每个单独的元素都可以看作是长度为 1 的最长上升子序列。
最终最长的上升子序列长度即为 dp 数组中的最大值。
"""


def lengthOfLIS(nums):
    n = len(nums)
    dp = [1] * n
    for i in range(n):
        for j in range(i):
            if nums[i] > nums[j]:
                dp[i] = max(dp[i], dp[j] + 1)

    return max(dp)
