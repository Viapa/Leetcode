def maximumXOR(nums):
    """
    给定一个数组nums, 在一次操作中选择任意的非负整数x和一个下标i
    将nums[i]更新为nums[i] AND (nums[i] XOR x)
    其中，AND 和 XOR 分别是与运算和异或运算
    请执行任意次的更新操作，并返回nums中所有元素最大的异或和（操作数可能为0）
    例如，[3,2,4,6] 选择 x=4, i=3 操作，则nums[3]=nums[3] AND (nums[3] XOR 4) = 2
    则nums=[3,2,4,2] 的异或和为 3^2^4^2 = 7，经验证，7是操作后能得到的最大异或和
    :param nums: 输入数组 [List[int]]
    :return: 变更后数组元素的异或和最大值
    """
    # 此题看似复杂，实则是考察对题目理解和异或运算的认识
    # 因为每次操作都能选择任意的x（注意，x不在nums内也可以），利用nums[i] XOR x操作后显然结果也是任意值
    # 再通过num[i] AND 任意值能够在二进制中保留对应位置的'1'
    # 因此对于整个数组，我们能选择数组中该位置是1的数，并保留这个'1'，把其他数的这一位全变为'0'，使得异或后这一位还是'1'
    # 即，对于所有二进制位，只要某位在数组元素中出现过1，则答案最好情况该为也是1，使得让异或后出现最大值
    # 换句话说，相当于对全体数组元素进行了"或操作"
    res = 0
    for item in nums:
        res |= item

    return res


# 测试
if __name__ == "__main__":
    nums = [3, 2, 4, 6]
    result = maximumXOR(nums)
    print(f"经过计算，对于数组 {nums} 经过若干次操作后得到的最大异或值为: {result} .")