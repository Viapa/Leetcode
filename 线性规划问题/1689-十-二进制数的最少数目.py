def minPartitions(n):
    """
    给出一个十进制数n，求构成和为n的十-二进制的最少个数
    其中，十-二进制数表示没有先导零，满足二进制规则的数，如"101"
    举例，对于n='32', 可以由'32' = '10' + '11' + '11'，最少3个十-二进制数组成
    :param n: 输入的十进制数字符串 [str]
    :return: 返回所需十-二进制数的个数 [int]
    """
    # 此题看似很难，实际通过观察可知，就是求给定字符串n中的最大字符
    # 例如'24873', 最大的为7，那么必然会要用7个'1'去累加，因为返回7即可
    max_char = '0'
    for c in n:
        if c > max_char:
            max_char = c

    return int(max_char)

# 测试
if __name__ == "__main__":
    n = "27346209830709182346"
    result = minPartitions(n)
    print(f"经过计算，对于输入的十进制数 {n} ,其最少所需的十-二进制数为: {result} .")